var TFLib = TFLib || {};

TFLib.TFConstants = {
    POPUP: {
        ERROR: "Error",
        INFO: "Info",
        CONFIRM: "Confirm",
        SUCCESS: "Success",
        OK: "OK",
        CANCEL: "CANCEL"
    },
    COMMON: {
        ISREQUIRED: "This field is Required",
        REGEX: "Failed regular expression",
        CUSTOMERROR: "Custom Error"
    },
    config: function(parentKey, valObj) {
        Object.keys(valObj).forEach(function(val) {
            this[parentKey][val] = valObj[val];
        }.bind(this));
    }
}, TFLib.ModalPopup = function(config) {
    var modalpopup = {
        scope: config,
        _init: function() {
            return this._initialize(), !!this._validateInitialize() && (this._generateTemplate(), 
            this._cacheDom(), this._applyProperty(), this._bindEvents(), this._attachProperties(), 
            this._render(), Object.freeze(this.outerComp));
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.popupId || "tf-modal-" + (TFLib.ModalPopup = ++TFLib.ModalPopup || 1), 
            this.onConfig = null != me.onConfig && 0 != me.onConfig, this.resizable = 0 != me.resizable, 
            this.footerVisible = 1 == me.footerVisible, this.width = me.width || 800, this.height = me.height || 600, 
            this.styles = me.styles || "", this.title = me.title || "", this.modalCloseCallback = me.modalOnClose || "", 
            this.modalOpenCallback = me.modalOnOpen || "", this.destroy = me.destroy || "", 
            this.dataTemplate = me.dataTemplate || null, this.footerTemplate = me.footerTemplate || null, 
            this.activeElement = document.activeElement;
        },
        _validateInitialize: function() {
            return !document.getElementById(this.dynamicId) || (console.log("Duplicate Id " + this.dynamicId), 
            !1);
        },
        _generateTemplate: function() {
            var el = [ '<div id="' + this.dynamicId + '" class="tf-modal-outer">', '<section class="tf-modal-inner">', '<header class="tf-modal-header">', '<span class="tf-modal-title">' + this.title + "</span>", '<a  class= "tf-modal-close-btn"></a>', "</header>", '<section class="tf-modal-body"></section>', '<footer class="tf-modal-footer ' + (this.footerVisible ? "" : "tf-display--none") + '"></footer>', "</section>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.outerComp.querySelector(".tf-modal-inner"), 
            this.modalHeader = this.innerComp.querySelector(".tf-modal-header"), this.modalBody = this.innerComp.querySelector(".tf-modal-body"), 
            this.modalFooter = this.innerComp.querySelector(".tf-modal-footer"), this.modalCloseNode = this.modalHeader.querySelector(".tf-modal-close-btn"), 
            this.currentPopupCount = document.getElementsByClassName("tf-modal-outer").length;
        },
        _applyProperty: function() {
            if (this.outerComp.setAttribute("data-zindex", 1e3 + this.currentPopupCount), "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.innerComp.style[style] = this.styles[style];
            }, this), this.dataTemplate) this.modalBody.appendChild(this.dataTemplate); else {
                var tpl = document.querySelector('template[data-template-id="' + this.dynamicId + '"]');
                if (tpl) {
                    var clone = this._templateContent(tpl);
                    this.modalBody.appendChild(clone);
                }
            }
            this.innerComp.style.width = this.width + "px", this.innerComp.style.height = this.height + "px", 
            this.footerTemplate && this.modalFooter.appendChild(this.footerTemplate);
        },
        _templateContent: function(template) {
            if ("content" in document.createElement("template")) return document.importNode(template.content, !0);
            var fragment = document.createDocumentFragment(), children = template.childNodes;
            for (i = 0; i < children.length; i++) fragment.appendChild(children[i].cloneNode(!0));
            return fragment;
        },
        _bindEvents: function() {
            this.scope;
            this.currentPopupCount || document.body.addEventListener("keyup", this._handleModalKeyUp), 
            this._handleModalCloseBtnClick = this._handleModalCloseBtnClick.bind(this), this.modalCloseNode.addEventListener("click", this._handleModalCloseBtnClick);
        },
        _attachProperties: function() {
            var me = this.scope;
            me.outerComp = this.outerComp, me.outerComp.show = this.show.bind(this), me.outerComp.close = this.close.bind(this), 
            me.outerComp.forceClose = this.forceClose.bind(this);
        },
        _render: function() {
            this.onConfig || (document.body.appendChild(this.outerComp), this._handleDraggable(), 
            this.innerComp.focus(), this._handleModalOpenCallback());
        },
        _handleDraggable: function() {
            TFLib.TFDraggable.call({
                childSel: "#" + this.dynamicId + " .tf-modal-inner",
                parentSel: "#" + this.dynamicId,
                elemSel: "#" + this.dynamicId + " .tf-modal-header"
            });
        },
        _handleModalKeyUp: function(e) {
            var itemId = "", popups = document.getElementsByClassName("tf-modal-outer");
            if (popups.length > 0) {
                var data = [].map.call(popups, function(value, index) {
                    var id = value.id, zindex = value.dataset.zindex, obj = {};
                    return obj[zindex] = id, obj;
                });
                data.sort(function(a, b) {
                    var aVal = +Object.keys(a)[0], bVal = +Object.keys(b)[0];
                    return bVal - aVal;
                });
                for (var key in data[0]) data[0].hasOwnProperty(key) && (itemId = data[0][key]);
                if ("Escape" === e.key || "Esc" === e.key) {
                    var closeBtn = document.getElementById(itemId).querySelector(".tf-modal-close-btn");
                    "none" !== closeBtn.style.display && closeBtn.click();
                }
            }
        },
        _handleModalOpenCallback: function() {
            var me = this.scope;
            "" != this.modalOpenCallback && this.modalOpenCallback.call(me);
        },
        _handleModalCloseBtnClick: function(e) {
            var me = this.scope, toDestroy = !0;
            setTimeout(function() {
                this.focus();
            }.bind(this.activeElement), 100), "" != this.modalCloseCallback && (toDestroy = this.modalCloseCallback.call(me, e)), 
            toDestroy = toDestroy !== !1, toDestroy && this._destroy();
        },
        show: function() {
            if (!document.getElementById(this.dynamicId)) {
                this.scope;
                document.body.appendChild(this.outerComp), this._handleDraggable(), this._handleModalOpenCallback.call(this);
            }
        },
        close: function() {
            document.getElementById(this.dynamicId) && this.modalCloseNode.click();
        },
        forceClose: function() {
            document.getElementById(this.dynamicId) && this._destroy();
        },
        _destroy: function() {
            this.outerComp.removeEventListener("click", this._handleModalCloseBtnClick), document.body.removeChild(this.outerComp), 
            this.currentPopupCount || document.body.removeEventListener("keyup", this._handleModalKeyUp), 
            "" != this.destroy && this.destroy();
        }
    };
    return modalpopup._init();
}, TFLib.ErrorPopup = function(config) {
    config.title = config.title || TFLib.TFConstants.POPUP.ERROR, config.imgClassName = "tf-error-icon", 
    config.CANCEL = config.CANCEL || !1, StandardPopup.call(config);
}, TFLib.InfoPopup = function(config) {
    config.title = config.title || TFLib.TFConstants.POPUP.INFO, config.imgClassName = "tf-info-icon", 
    config.CANCEL = config.CANCEL || !1, StandardPopup.call(config);
}, TFLib.ConfirmPopup = function(config) {
    config.title = config.title || TFLib.TFConstants.POPUP.CONFIRM, config.imgClassName = "tf-confirm-icon", 
    StandardPopup.call(config);
}, TFLib.SuccessPopup = function(config) {
    config.title = config.title || TFLib.TFConstants.POPUP.SUCCESS, config.imgClassName = "tf-success-icon", 
    config.CANCEL = config.CANCEL || !1, StandardPopup.call(config);
}, TFLib.PromptPopup = function(config) {
    config.title = config.title || TFLib.TFConstants.POPUP.SUCCESS, config.promptPopup = !0, 
    config.imgClassName = null, StandardPopup.call(config);
}, StandardPopup = function() {
    var standardpopup = {
        scope: this,
        _init: function() {
            this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render();
        },
        _initialize: function() {
            var me = this.scope;
            this.popupId = me.popupId || "popupId-" + (StandardPopup.count = ++StandardPopup.count || 1), 
            this.msg = me.msg, this.title = me.title, this.imgClassName = me.imgClassName || "", 
            this.promptPopup = me.promptPopup || !1, this.promptPopup && (this.dataTemplate = me.dataTemplate || ""), 
            this.modalOnClose = me.modalOnClose || "", this.modalOnOpen = me.modalOnOpen || "", 
            this.popupOnOk = me.popupOnOk || "", this.popupOnCancel = me.popupOnCancel || "", 
            this.OK = 0 != me.OK, this.CANCEL = 0 != me.CANCEL, this.OKVal = me.OKVal || TFLib.TFConstants.POPUP.OK, 
            this.CANCELVal = me.CANCELVal || TFLib.TFConstants.POPUP.CANCEL;
        },
        _generateTemplate: function() {
            if (this.promptPopup) this.childTemplateData = $(this.dataTemplate)[0]; else {
                var elData = [ '<div class="tf-std-popup">', '<div class="tf-std-popup-icon"><span class="' + this.imgClassName + '"></span></div>', '<div class="tf-std-popup-msg"><span>' + this.msg + "</span></div>", "</div>" ].join("\n");
                this.childTemplateData = $(elData)[0];
            }
            var elFooter = [ "<div>", this.OK ? '<input type="button" class="tf-std-btn" value="' + this.OKVal + '" ModalPopupOKBtn="true" autofocus>' : "", this.CANCEL ? '<input type="button" class="tf-std-btn" value="' + this.CANCELVal + '" ModalPopupCancelBtn="true">' : "", "</div>" ].join("\n");
            this.childTemplateFooter = $(elFooter)[0];
        },
        _cacheDom: function() {
            this.innerComp = this.childTemplateData, this.footerComp = this.childTemplateFooter, 
            this.OK && (this.okComp = this.footerComp.querySelector('[ModalPopupOKBtn="true"]')), 
            this.CANCEL && (this.cancelComp = this.footerComp.querySelector('[ModalPopupCancelBtn="true"]'));
        },
        _applyProperty: function() {},
        _bindEvents: function() {
            this.okComp && (this.okComp.addEventListener("click", this.handlePopupOnOk), this.okComp.addEventListener("blur", this.handleOkBlur)), 
            this.cancelComp && (this.cancelComp.addEventListener("click", this.handlePopupOnCancel), 
            this.cancelComp.addEventListener("blur", this.handleCancelBlur)), Boolean(this.okComp) ^ Boolean(this.cancelComp) && document.addEventListener("keydown", this.handleKeyDown);
        },
        _attachProperties: function() {
            var me = this.scope;
            me.destroy = this.destroy, me.closeComp = this.closeComp, me.cancelComp = this.cancelComp, 
            me.okComp = this.okComp, this.okComp && (me.popupOnOk = this.popupOnOk, this.okComp.shared = me), 
            this.cancelComp && (me.popupOnCancel = this.popupOnCancel, this.cancelComp.shared = me);
        },
        _render: function() {
            var me = this.scope;
            TFLib.ModalPopup({
                styles: {
                    minWidth: "400px",
                    maxWidth: "500px",
                    minHeight: "180px"
                },
                width: "400px",
                height: "180px",
                footerTemplate: this.footerComp,
                title: this.title,
                popupId: this.popupId,
                dataTemplate: this.innerComp,
                modalOnClose: this.modalOnClose,
                modalOnOpen: this.modalOnOpen,
                destroy: this.destroy.bind(this),
                onConfig: !0,
                resizable: !1,
                footerVisible: !0
            }).show(), this.closeComp = document.getElementById(this.popupId).querySelector(".tf-modal-close-btn"), 
            this._attachProperties(), "tf-confirm-icon" == this.imgClassName && (this.closeComp.style.display = "none"), 
            this.okComp && this.cancelComp ? this.handleCancelBlur.call(me.cancelComp) : this.okComp && !this.cancelComp && this.handleCancelBlur.call(me.okComp);
        },
        handleKeyDown: function(e) {
            "Tab" === e.key && e.preventDefault();
        },
        handleOkBlur: function(e) {
            this.shared.okComp && this.shared.cancelComp && (this.shared.cancelComp.focus(), 
            this.shared.cancelComp.setAttribute("tabindex", 1e4), this.shared.okComp.setAttribute("tabindex", 10001));
        },
        handleCancelBlur: function(e) {
            this.shared.okComp && this.shared.cancelComp ? (this.shared.okComp.focus(), this.shared.cancelComp.setAttribute("tabindex", 10001), 
            this.shared.okComp.setAttribute("tabindex", 1e4)) : this.shared.okComp && !this.shared.cancelComp && this.shared.okComp.focus();
        },
        handlePopupOnOk: function(e) {
            "" != this.shared.popupOnOk && this.shared.popupOnOk(), this.shared.destroy(), this.shared.closeComp.click();
        },
        handlePopupOnCancel: function(e) {
            "" != this.shared.popupOnCancel && this.shared.popupOnCancel(), this.shared.destroy(), 
            this.shared.closeComp.click();
        },
        destroy: function() {
            this.okComp && (this.okComp.removeEventListener("click", this.handlePopupOnOk), 
            this.okComp.removeEventListener("blur", this.handleOkBlur)), this.cancelComp && (this.cancelComp.removeEventListener("click", this.handlePopupOnCancel), 
            this.cancelComp.removeEventListener("blur", this.handleCancelBlur)), Boolean(this.okComp) ^ Boolean(this.cancelComp) && document.removeEventListener("keydown", this.handleKeyDown);
        }
    };
    standardpopup._init();
}, TFLib.TFDraggable = function() {
    var draggable = {
        scope: this,
        _init: function() {
            this._initialize(), this._bindEvents();
        },
        _initialize: function() {
            var me = this.scope;
            this.childEl = document.querySelector(me.childSel), this.parentEl = document.querySelector(me.parentSel), 
            this.elemEl = document.querySelector(me.elemSel);
        },
        _bindEvents: function() {
            this._handleMouseDown = this._handleMouseDown.bind(this), this.childEl.addEventListener("mousedown", this._handleMouseDown), 
            this._handleMouseUp = this._handleMouseUp.bind(this), this.childEl.addEventListener("mouseup", this._handleMouseUp);
        },
        _handleMouseDown: function(e) {
            if ((1 === $(this.elemEl).find(e.target).length || this.elemEl === e.target) && 2 !== e.buttons) {
                this.activeEl = document.activeElement;
                var X = e.clientX, Y = e.clientY, childTop = +this.childEl.getBoundingClientRect().top, childLeft = +this.childEl.getBoundingClientRect().left;
                this.childWidth = +this.childEl.getBoundingClientRect().width, this.childHeight = +this.childEl.getBoundingClientRect().height, 
                this.parentWidth = +this.parentEl.getBoundingClientRect().width, this.parentHeight = +this.parentEl.getBoundingClientRect().height, 
                this.orgX = X - childLeft, this.orgY = Y - childTop, this._handleMouseMove = this._handleMouseMove.bind(this), 
                document.addEventListener("mousemove", this._handleMouseMove), document.addEventListener("mouseup", this._handleMouseUp), 
                e.preventDefault();
            }
        },
        _handleMouseMove: function(e) {
            var X = e.clientX, Y = e.clientY, curX = X - this.orgX, curY = Y - this.orgY;
            curX < 0 && (curX = 0), curY < 0 && (curY = 0), curX + this.childWidth > this.parentWidth && (curX = this.parentWidth - this.childWidth), 
            curY + this.childHeight > this.parentHeight && (curY = this.parentHeight - this.childHeight), 
            this.childEl.style.cursor = "move", this._move(curX, curY);
        },
        _handleMouseUp: function(e) {
            document.removeEventListener("mousemove", this._handleMouseMove), this.childEl.style.cursor = "default", 
            setTimeout(function() {
                this.activeEl && this.activeEl.focus();
            }.bind(this), 100), document.removeEventListener("mouseup", this._handleMouseUp);
        },
        _move: function(xpos, ypos) {
            this.childEl.style.left = xpos + "px", this.childEl.style.top = ypos + "px";
        }
    };
    draggable._init();
};