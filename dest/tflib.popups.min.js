var TFLib = TFLib || {};

TFLib.ModalPopup = function(config) {
    function getRandomInt(min, max) {
        return min = Math.ceil(min), max = Math.floor(max), Math.floor(Math.random() * (max - min) + min);
    }
    var modalpopup = {
        scope: config,
        _init: function() {
            return this._initialize(), !!this._validateInitialize() && (this._generateTemplate(), 
            this._cacheDom(), this._applyProperty(), this._bindEvents(), this._attachProperties(), 
            this._render(), this._handleKeyUp(), Object.freeze(this.outerComp));
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.popupId || "tf-modal-" + getRandomInt(1, 1e4), this.onConfig = null != me.onConfig && 0 != me.onConfig, 
            this.resizable = 0 != me.resizable, this.footerVisible = 0 != me.footerVisible, 
            this.width = me.width || 800, this.height = me.height || 600, this.title = me.title || "", 
            this.modalCloseCallback = me.modalOnClose || "", this.modalOpenCallback = me.modalOnOpen || "", 
            this.dataTemplate = me.dataTemplate || null;
        },
        _validateInitialize: function() {
            return !document.getElementById(this.dynamicId) || (console.log("Duplicate Id " + this.dynamicId), 
            !1);
        },
        _generateTemplate: function() {
            var el = [ '<div id="' + this.dynamicId + '" class="tf-modal-outer">', '<section class="tf-modal-inner">', '<header class="tf-modal-header">', '<span class="tf-modal-title">' + this.title + "</span>", '<a  class= "tf-modal-close-btn"></a>', "</header>", '<section class="tf-modal-body"></section>', '<footer class="tf-modal-footer ' + (this.footerVisible ? "" : "tf-display--none") + '"></footer>', "</section>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.modalCloseNode = this.outerComp.querySelector(".tf-modal-close-btn"), 
            this.modalBody = this.outerComp.querySelector(".tf-modal-body");
        },
        _applyProperty: function() {
            var currentPopupCount = document.getElementsByClassName("tf-modal-outer").length;
            if (this.outerComp.setAttribute("data-zindex", 1e3 + currentPopupCount), this.dataTemplate) this.modalBody.appendChild(this.dataTemplate); else {
                var tpl = document.querySelector('template[data-template-id="' + this.dynamicId + '"]');
                if (tpl) {
                    var clone = document.importNode(tpl.content, !0);
                    this.modalBody.appendChild(clone);
                }
            }
        },
        _bindEvents: function() {
            this.scope;
            document.addEventListener("keyup", this._handleModalKeyUp), this._handleModalCloseBtnClick = this._handleModalCloseBtnClick.bind(this), 
            this.modalCloseNode.addEventListener("click", this._handleModalCloseBtnClick);
        },
        _attachProperties: function() {
            var me = this.scope;
            me.outerComp = this.outerComp, me.outerComp.show = this.show.bind(this), me.outerComp.close = this.close.bind(this);
        },
        _render: function() {
            this.onConfig || (document.body.appendChild(this.outerComp), this._handleModalOpenCallback());
        },
        _handleModalKeyUp: function(e) {
            var itemId = "", popups = document.getElementsByClassName("tf-modal-outer");
            if (popups.length > 0) {
                var data = [].map.call(popups, function(value, index) {
                    var id = value.id, zindex = value.dataset.zindex, obj = {};
                    return obj[zindex] = id, obj;
                });
                data.sort(function(a, b) {
                    var aVal = +Object.keys(a)[0], bVal = +Object.keys(b)[0];
                    return bVal - aVal;
                });
                for (var key in data[0]) data[0].hasOwnProperty(key) && (itemId = data[0][key]);
                27 == e.keyCode && document.getElementById(itemId).querySelector(".tf-modal-close-btn").click();
            }
        },
        _handleModalOpenCallback: function() {
            var me = this.scope;
            "" != this.modalOpenCallback && this.modalOpenCallback.call(me);
        },
        _handleModalCloseBtnClick: function(e) {
            var me = this.scope;
            "" != this.modalCloseCallback && this.modalCloseCallback.call(me), this._destroy();
        },
        _handleKeyUp: function(e) {},
        show: function() {
            if (!document.getElementById(this.dynamicId)) {
                this.scope;
                document.body.appendChild(this.outerComp), this._handleModalOpenCallback.call(this);
            }
        },
        close: function() {
            document.getElementById(this.dynamicId) && this.modalCloseNode.click();
        },
        _destroy: function() {
            var oldChild = document.body.removeChild(document.getElementById(this.dynamicId));
            oldChild.removeEventListener("click", this._handleModalCloseBtnClick);
        }
    };
    return modalpopup._init();
}, TFLib.ErrorPopup = function(config) {
    config.title = config.title || "Error", config.imgClassName = "tf-error-icon", StandardPopup.call(config);
}, TFLib.InfoPopup = function(config) {
    config.title = config.title || "Info", config.imgClassName = "tf-info-icon", StandardPopup.call(config);
}, TFLib.ConfirmPopup = function(config) {
    config.title = config.title || "Confirm", config.imgClassName = "tf-confirm-icon", 
    StandardPopup.call(config);
}, TFLib.SuccessPopup = function(config) {
    config.title = config.title || "Success", config.imgClassName = "tf-success-icon", 
    StandardPopup.call(config);
}, StandardPopup = function() {
    function getRandomInt(min, max) {
        return min = Math.ceil(min), max = Math.floor(max), Math.floor(Math.random() * (max - min)) + min;
    }
    var standardpopup = {
        scope: this,
        _init: function() {
            this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render();
        },
        _initialize: function() {
            var me = this.scope;
            this.popupId = me.popupId || "popupId-" + getRandomInt(1, 1e4), this.msg = me.msg, 
            this.title = me.title, this.imgClassName = me.imgClassName, this.modalOnClose = me.modalOnClose || "", 
            this.modalOnOpen = me.modalOnOpen || "", this.popupOnOk = me.popupOnOk || "", this.popupOnCancel = me.popupOnCancel || "", 
            this.OK = 0 != me.OK, this.CANCEL = 0 != me.CANCEL, this.OKVal = null, this.CANCELVal = null;
        },
        _generateTemplate: function() {
            var el = [ '<div class="tf-std-popup">', '<div class="tf-std-popup-icon"><span class="' + this.imgClassName + '"></span></div>', '<div class="tf-std-popup-msg"><span>' + this.msg + "</span></div>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.innerComp = this.childTemplate;
        },
        _applyProperty: function() {},
        _bindEvents: function() {},
        _attachProperties: function() {},
        _render: function() {
            TFLib.ModalPopup({
                width: 600,
                height: 178,
                title: this.title,
                popupId: this.popupId,
                dataTemplate: this.innerComp,
                modalOnClose: this.modalOnClose,
                modalOnOpen: this.modalOnOpen,
                onConfig: !0,
                resizable: !1,
                footerVisible: !1
            }).show();
        }
    };
    standardpopup._init();
};