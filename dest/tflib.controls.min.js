var TFLib = TFLib || {};

"selectedOptions" in document.createElement("select") || Object.defineProperty(HTMLSelectElement.prototype, "selectedOptions", {
    get: function() {
        try {
            return document.querySelector(":checked"), function() {
                return this.querySelectorAll(":checked");
            };
        } catch (e) {
            return function() {
                if (!this.multiple) return this.selectedIndex >= 0 ? [ this.options[this.selectedIndex] ] : [];
                for (var i = 0, a = []; i < this.options.length; i++) this.options[i].selected && a.push(this.options[i]);
                return a;
            };
        }
    }()
}), DOMTokenList.prototype.addmany = function(arrClassList) {
    arrClassList.forEach(function(val) {
        this.add(val);
    }.bind(this));
}, DOMTokenList.prototype.removemany = function(arrClassList) {
    arrClassList.forEach(function(val) {
        this.remove(val);
    }.bind(this));
}, TFLib.TFButtonMethods = function() {
    this.replaceText = function(newText) {
        this.innerComp.innerText = newText;
    }, this.addInnerClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.innerComp.classList.addmany(newClass);
    }, this.removeInnerClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.innerComp.classList.removemany(oldClass);
    }, this.disable = function() {
        this.innerComp.setAttribute("disabled", !0);
    }, this.enable = function() {
        this.innerComp.removeAttribute("disabled");
    }, this.setAttribute = function(attrName, attrVal) {
        this.innerComp.setAttribute(attrName, attrVal);
    }, this.removeAttribute = function(attrName) {
        this.innerComp.removeAttribute(attrName);
    };
}, TFLib.TFCheckboxFieldMethods = function() {
    this.displayLabelHide = function() {
        this.labelComp.style.display = "none";
    }, this.displayLabelShow = function() {
        this.labelComp.style.display = "";
    }, this.displayControlHide = function() {
        this.controlComp.style.display = "none";
    }, this.displayControlShow = function() {
        this.controlComp.style.display = "";
    }, this.visibleLabelHide = function() {
        this.labelComp.style.visibility = "hidden";
    }, this.visibleLabelShow = function() {
        this.labelComp.style.visibility = "";
    }, this.visibleControlHide = function() {
        this.controlComp.style.visibility = "hidden";
    }, this.visibleControlShow = function() {
        this.controlComp.style.visibility = "";
    }, this.addLabelStyle = function(prop, val) {
        this.labelComp.style[prop] = val;
    }, this.removeLabelStyle = function(prop) {
        this.labelComp.style[prop] = "";
    }, this.addControlStyle = function(prop, val) {
        this.controlComp.style[prop] = val;
    }, this.removeControlStyle = function(prop) {
        this.controlComp.style[prop] = "";
    }, this.changeLabel = function(newLabelText) {
        this.labelComp.querySelector("#" + this.labelId).innerHTML = newLabelText, this.fieldLabel = newLabelText;
    }, this.addLabelClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.labelComp.classList.addmany(newClass);
    }, this.removeLabelClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.labelComp.classList.removemany(oldClass);
    }, this.addControlClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.controlComp.classList.addmany(newClass);
    }, this.removeControlClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.controlComp.classList.removemany(oldClass);
    }, this.isRequired = function(status, errmsg) {
        this.validations.hasOwnProperty("isRequired") ? (this.validations.isRequired.value = status, 
        this.validations.isRequired.value ? (errmsg && (this.validations.isRequired.errmsg = errmsg), 
        this.validations.customError.value || this.controlComp.setAttribute("data-tooltip", this.validations.isRequired.errmsg)) : this.validations.customError.value || (this.controlComp.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        this.controlComp.removeAttribute("data-tooltip"))) : (Object.defineProperty(this.validations, "isRequired", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), status && (this.validations.isRequired.value = status), errmsg && (this.validations.isRequired.errmsg = errmsg)), 
        this.setValidations.call(this);
    }, this.customError = function(status, errmsg) {
        this.validations.hasOwnProperty("customError") ? (this.validations.customError.value = status, 
        this.validations.customError.value ? (errmsg && (this.validations.customError.errmsg = errmsg), 
        this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), this.controlComp.setAttribute("data-tooltip", this.validations.customError.errmsg)) : (this.controlComp.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        this.controlComp.removeAttribute("data-tooltip"))) : (Object.defineProperty(this.validations, "customError", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), status && (this.validations.customError.value = status), errmsg && (this.validations.customError.errmsg = errmsg), 
        this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), this.controlComp.setAttribute("data-tooltip", this.validations.customError.errmsg));
    }, this.validate = function() {
        return this.isValidated = !0, this.validations && Object.keys(this.validations).forEach(function(val) {
            if ("isRequired" === val) this.validations.isRequired.value && (this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
            this.controlComp.setAttribute("data-tooltip", this.validations.isRequired.errmsg), 
            this.isValidated = !1, "SELECT" === this.innerComp.tagName && this.innerComp.selectedOptions.length > 0 && "" != this.innerComp.selectedOptions[this.innerComp.selectedOptions.length - 1].value && (this.controlComp.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
            this.controlComp.removeAttribute("data-tooltip", this.validations.isRequired.errmsg), 
            this.isValidated = !0)); else if ("regex" === val) {
                if (this.validations.regex.value) {
                    var regex = new RegExp(this.validations.regex.pattern);
                    regex.test(this.innerComp.value) || (this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
                    this.controlComp.setAttribute("data-tooltip", this.validations.regex.errmsg), this.isValidated = !1);
                }
            } else "customError" === val && this.validations.customError.value && (this.isValidated = !1);
        }, this), this.isValidated;
    };
}, TFLib.TFCheckboxMethods = function() {
    this.displayLabelHide = function() {
        this.labelComp.style.display = "none";
    }, this.displayLabelShow = function() {
        this.labelComp.style.display = "";
    }, this.displayInnerHide = function() {
        this.innerComp.style.display = "none";
    }, this.displayInnerShow = function() {
        this.innerComp.style.display = "";
    }, this.visibleLabelHide = function() {
        this.labelComp.style.visibility = "hidden";
    }, this.visibleLabelShow = function() {
        this.labelComp.style.visibility = "";
    }, this.visibleInnerHide = function() {
        this.innerComp.style.visibility = "hidden";
    }, this.visibleInnerShow = function() {
        this.innerComp.style.visibility = "";
    }, this.addLabelStyle = function(prop, val) {
        this.labelComp.style[prop] = val;
    }, this.removeLabelStyle = function(prop) {
        this.labelComp.style[prop] = "";
    }, this.addInnerStyle = function(prop, val) {
        this.innerComp.style[prop] = val;
    }, this.removeInnerStyle = function(prop) {
        this.innerComp.style[prop] = "";
    }, this.changeLabel = function(newLabelText) {
        this.labelComp.innerHTML = newLabelText, this.fieldLabel = newLabelText;
    }, this.addLabelClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.labelComp.classList.addmany(newClass);
    }, this.removeLabelClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.labelComp.classList.removemany(oldClass);
    }, this.addInnerClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.innerComp.classList.addmany(newClass);
    }, this.removeInnerClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.innerComp.classList.removemany(oldClass);
    }, this.setAttribute = function(attrName, attrVal) {
        this.innerComp.setAttribute(attrName, attrVal);
    }, this.removeAttribute = function(attrName) {
        this.innerComp.removeAttribute(attrName);
    };
}, TFLib.TFComboboxFieldMethods = function() {
    this.addData = function(data, value, display) {
        this.value = value, this.display = display, data.forEach(function(val, index) {
            var option = document.createElement("option");
            option.setAttribute("value", val[this.value]), option.innerHTML = val[this.display], 
            this.innerComp.appendChild(option);
        }, this);
    };
}, TFLib.TFLoaderMethods = function() {
    this.addInnerClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.innerComp.classList.addmany(newClass);
    }, this.removeInnerClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.innerComp.classList.removemany(oldClass);
    }, this.show = function(loaderText) {
        this.loaderCount++, loaderText && (this.innerComp.loaderText.innerText = loaderText), 
        this.outerComp.style.display = "table";
    }, this.hide = function() {
        --this.loaderCount <= 0 && (this.loaderCount, this.outerComp.style.display = "none", 
        this.innerComp.loaderImage.innerHTML = this.innerComp.initLoaderImage, this.innerComp.loaderText.innerText = this.innerComp.initLoaderText);
    }, this.changeLoaderImage = function(loaderImage, isDefault) {
        loaderImage && (isDefault ? this.innerComp.loaderImage.innerHTML = this.innerComp.initLoaderImage = loaderImage : this.innerComp.loaderImage.innerHTML = loaderImage);
    }, this.changeLoaderText = function(loaderText, isDefault) {
        loaderText && (isDefault ? this.innerComp.loaderText.innerHTML = this.innerComp.initLoaderText = loaderText : this.innerComp.loaderText.innerHTML = loaderText);
    }, this.setAttribute = function(attrName, attrVal) {
        this.innerComp.setAttribute(attrName, attrVal);
    }, this.removeAttribute = function(attrName) {
        this.innerComp.removeAttribute(attrName);
    };
}, TFLib.TFSharedMethods = function() {
    this.hide = function() {
        this.outerComp.style.display = "none";
    }, this.show = function() {
        this.outerComp.style.display = "";
    }, this.visibleHide = function() {
        this.outerComp.style.visibility = "hidden";
    }, this.visibleShow = function() {
        this.outerComp.style.visibility = "";
    }, this.addClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.outerComp.classList.addmany(newClass);
    }, this.removeClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.outerComp.classList.removemany(oldClass);
    }, this.addStyle = function(prop, val) {
        this.outerComp.style[prop] = val;
    }, this.removeStyle = function(prop) {
        this.outerComp.style[prop] = "";
    }, this.append = function(el) {
        this.outerComp.appendChild(el);
    }, this.prepend = function(el) {
        this.outerComp.insertBefore(el, this.outerComp.childNodes[0]);
    }, this.insertDomAt = function(selector, el) {
        this.outerComp.insertBefore(el, this.outerComp.querySelector(selector));
    }, this.appendTo = function(selector, el) {
        if (el) {
            var ele = this.outerComp.querySelector(selector);
            ele.appendChild(el);
        } else {
            var ele = document.querySelector(selector);
            ele && ele.appendChild(this.outerComp);
        }
        return this.outerComp;
    }, this.insertBefore = function(selector, el) {
        if (el) {
            var ele = this.outerComp.querySelector(selector);
            if (ele) {
                var callingEL = this.outerComp == ele.parentElement ? this.outerComp.parentElement : this.outerComp;
                callingEL.insertBefore(el, ele.parentElement);
            }
        } else {
            var ele = document.querySelector(selector);
            if (ele) {
                var callingEL = document.body == ele.parentElement ? document.body.parentElement : document.body;
                document.body.insertBefore(this.outerComp, ele.parentElement);
            }
        }
        return this.outerComp;
    };
}, TFLib.TFTextFieldMethods = function() {
    this.displayLabelHide = function() {
        this.labelComp.style.display = "none";
    }, this.displayLabelShow = function() {
        this.labelComp.style.display = "";
    }, this.displayControlHide = function() {
        this.controlComp.style.display = "none";
    }, this.displayControlShow = function() {
        this.controlComp.style.display = "";
    }, this.visibleLabelHide = function() {
        this.labelComp.style.visibility = "hidden";
    }, this.visibleLabelShow = function() {
        this.labelComp.style.visibility = "";
    }, this.visibleControlHide = function() {
        this.controlComp.style.visibility = "hidden";
    }, this.visibleControlShow = function() {
        this.controlComp.style.visibility = "";
    }, this.addLabelStyle = function(prop, val) {
        this.labelComp.style[prop] = val;
    }, this.removeLabelStyle = function(prop) {
        this.labelComp.style[prop] = "";
    }, this.addControlStyle = function(prop, val) {
        this.controlComp.style[prop] = val;
    }, this.removeControlStyle = function(prop) {
        this.controlComp.style[prop] = "";
    }, this.changeLabel = function(newLabelText) {
        this.labelComp.querySelector('[for="' + this.innerId + '"]').innerHTML = newLabelText, 
        a.shared.fieldLabel = newLabelText;
    }, this.addLabelClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.labelComp.classList.addmany(newClass);
    }, this.removeLabelClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.labelComp.classList.removemany(oldClass);
    }, this.addControlClass = function(newClass) {
        newClass = newClass.constructor === Array ? newClass : [ newClass ], this.controlComp.classList.addmany(newClass);
    }, this.removeControlClass = function(oldClass) {
        oldClass = oldClass.constructor === Array ? oldClass : [ oldClass ], this.controlComp.classList.removemany(oldClass);
    }, this.customError = function(status, errmsg) {
        this.validations.hasOwnProperty("customError") ? (this.validations.customError.value = status, 
        this.validations.customError.value ? (errmsg && (this.validations.customError.errmsg = errmsg), 
        this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), this.controlComp.setAttribute("data-tooltip", this.validations.customError.errmsg)) : (this.controlComp.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        this.controlComp.removeAttribute("data-tooltip"))) : status && (Object.defineProperty(this.validations, "customError", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), this.validations.customError.value = status, errmsg ? this.validations.customError.errmsg = errmsg : this.validations.customError.errmsg = this.validations.__proto__.customError.errmsg, 
        this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), this.controlComp.setAttribute("data-tooltip", this.validations.customError.errmsg));
    }, this.isRequired = function(status, errmsg) {
        this.validations.hasOwnProperty("isRequired") ? (this.validations.isRequired.value = status, 
        this.validations.isRequired.value ? (errmsg && (this.validations.isRequired.errmsg = errmsg), 
        this.validations.customError.value || this.controlComp.setAttribute("data-tooltip", this.validations.isRequired.errmsg)) : this.validations.customError.value || (this.controlComp.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        this.controlComp.removeAttribute("data-tooltip"))) : status && (Object.defineProperty(this.validations, "isRequired", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), this.validations.isRequired.value = status, errmsg ? this.validations.isRequired.errmsg = errmsg : this.validations.isRequired.errmsg = this.validations.__proto__.isRequired.errmsg), 
        this.setValidations.call(this);
    }, this.onlyText = function(status) {
        this.validations.hasOwnProperty("onlyText") ? this.validations.onlyText = status : status && (Object.defineProperty(this.validations, "onlyText", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), this.validations.onlyText = status), this.setValidations.call(this);
    }, this.onlyNumber = function(status) {
        this.validations.hasOwnProperty("onlyNumber") ? this.validations.onlyNumber = status : status && (Object.defineProperty(this.validations, "onlyNumber", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), this.validations.onlyNumber = status), this.setValidations.call(this);
    }, this.regex = function(status, errmsg, pattern) {
        this.validations.hasOwnProperty("regex") ? (this.validations.regex.value = status, 
        this.validations.regex.value ? (errmsg && (this.validations.regex.errmsg = errmsg), 
        this.validations.customError.value || this.controlComp.setAttribute("data-tooltip", this.validations.regex.errmsg), 
        pattern && (this.validations.regex.pattern = pattern)) : this.validations.customError.value || (this.controlComp.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        this.controlComp.removeAttribute("data-tooltip"))) : status && (Object.defineProperty(this.validations, "regex", {
            value: {},
            writable: !0,
            configurable: !0,
            enumerable: !0
        }), this.validations.regex.value = status, errmsg ? this.validations.regex.errmsg = errmsg : this.validations.regex.errmsg = this.validations.__proto__.regex.errmsg, 
        pattern ? this.validations.regex.pattern = pattern : this.validations.regex.pattern = this.validations.__proto__.regex.pattern), 
        this.setValidations.call(this);
    }, this.validate = function() {
        return this.isValidated = !0, this.validations && Object.keys(this.validations).forEach(function(val) {
            if ("isRequired" === val) 0 == this.innerComp.value.trim().length && (this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
            this.controlComp.setAttribute("data-tooltip", this.validations.isRequired.errmsg), 
            this.isValidated = !1); else if ("regex" === val) {
                if (this.validations.regex.value) {
                    var regex = new RegExp(this.validations.regex.pattern);
                    regex.test(this.innerComp.value) || (this.controlComp.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
                    this.controlComp.setAttribute("data-tooltip", this.validations.regex.errmsg), this.isValidated = !1);
                }
            } else "customError" === val && this.validations.customError.value && (this.isValidated = !1);
        }, this), this.isValidated;
    };
}, TFLib.TFConstants = {
    POPUP: {
        ERROR: "Error",
        INFO: "Info",
        CONFIRM: "Confirm",
        SUCCESS: "Success",
        OK: "OK",
        CANCEL: "CANCEL"
    },
    COMMON: {
        ISREQUIRED: "This field is Required",
        REGEX: "Failed regular expression",
        CUSTOMERROR: "Custom Error"
    },
    config: function(parentKey, valObj) {
        Object.keys(valObj).forEach(function(val) {
            this[parentKey][val] = valObj[val];
        }.bind(this));
    }
}, TFLib.TFValidations = function() {
    function isKeyAllowed(key, lists) {
        for (var status = !1, i = 0; i < lists.length; i++) if (lists[i].indexOf(key) > -1) {
            status = !0;
            break;
        }
        return status;
    }
    var alphaKeyList = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " " ], numberKeyList = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ], generalKeyList = [ "Tab", "CapsLock", "Shift", "Enter", "Backspace", "Alt", "Control" ], cursorControlKeyList = [ "ScrollLock", "Delete", "Insert", "Home", "End", "PageUp", "PageDown", "ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight" ], functionKeyList = [ "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12" ];
    this.isRequired = function(e) {
        var control = this.controlComp, inputControl = this.innerComp, controlVal = e.target.value.trim();
        if ("blur" === e.type) "" === controlVal ? (control.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
        control.setAttribute("data-tooltip", this.validations.isRequired.errmsg)) : control.classList.contains("tooltip") && !this.validations.customError.value && (control.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        control.removeAttribute("data-tooltip")); else if ("input" === e.type) controlVal.length > 0 && control.getAttribute("data-tooltip") === this.validations.isRequired.errmsg ? control.classList.contains("tooltip") && (this.validations.customError.value ? control.setAttribute("data-tooltip", this.validations.customError.errmsg) : (control.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
        control.removeAttribute("data-tooltip"))) : "" !== controlVal && "\n" !== controlVal || (control.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
        control.setAttribute("data-tooltip", this.validations.isRequired.errmsg)); else if ("change" === e.type) {
            for (var chkStatus = !1, i = 0; i < inputControl.length; i++) if (inputControl[i].checked) {
                chkStatus = !0;
                break;
            }
            chkStatus ? (control.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
            control.removeAttribute("data-tooltip")) : (control.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
            control.setAttribute("data-tooltip", this.validations.isRequired.errmsg));
        }
    }, this.onlyNumber = function(e) {
        isKeyAllowed(e.key, [ numberKeyList, generalKeyList, functionKeyList, cursorControlKeyList ]) || e.preventDefault();
    }, this.onlyText = function(e) {
        isKeyAllowed(e.key, [ alphaKeyList, generalKeyList, functionKeyList, cursorControlKeyList ]) || e.preventDefault();
    }, this.regex = function(e) {
        var control = this.controlComp, controlVal = (this.innerComp, e.target.value.trim());
        if (this.validations.regex.value) {
            var regex = new RegExp(this.validations.regex.pattern);
            "blur" !== e.type && "input" !== e.type || controlVal.length > 0 && (regex.test(controlVal) ? control.classList.contains("tooltip") && (control.classList.removemany([ "tooltip", "tf-err-border--red" ]), 
            control.removeAttribute("data-tooltip")) : (control.classList.addmany([ "tooltip", "tf-err-border--red" ]), 
            control.setAttribute("data-tooltip", this.validations.regex.errmsg)));
        }
    };
}, TFLib.TFButton = function() {
    var button = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-btn-" + (TFLib.TFButton.count = ++TFLib.TFButton.count || 1), 
            this.styles = me.styles || "", this.attributes = me.attributes || "", this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.btnClass = !!me.btnClass && (me.btnClass.constructor === Array ? me.btnClass : [ me.btnClass ]), 
            this.btnText = me.btnText || "", this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-btn-outer" class="tf-field-container">', '<button type="button" control-type="tf-btn"', 'id="' + this.dynamicId + '"', 'class="tf-button"', "></button>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.childTemplate.querySelector('[control-type="tf-btn"]');
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.innerComp.style[style] = this.styles[style];
            }, this), "" != this.attributes && Object.keys(this.attributes).forEach(function(attribute) {
                this.innerComp.setAttribute(attribute, this.attributes[attribute]);
            }, this), this.btnText && (this.innerComp.innerHTML = this.btnText), this.btnClass && this.innerComp.classList.addmany(this.btnClass), 
            this.compClass && this.outerComp.classList.addmany(this.compClass);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.innerComp = this.innerComp, me.outerComp = this.outerComp, TFLib.TFButtonMethods.call(me), 
            TFLib.TFSharedMethods.call(me), me.outerComp.shared = me;
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && me.render.call(me);
        }
    };
    return button._init();
}, TFLib.TFCheckbox = function() {
    var checkbox = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-chk-" + (me.attributes && me.attributes.name ? me.attributes.name : "") + (TFLib.TFCheckbox.count = ++TFLib.TFCheckbox.count || 1), 
            this.fieldLayout = me.fieldLayout || "row", this.styles = me.styles || "", this.attributes = me.attributes || "", 
            this.name = me.name || "", this.checked = me.checked === !0, this.fieldLabel = me.fieldLabel || "", 
            this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-checkbox-outer" class="tf-flex ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<input control-type="tf-checkbox" id="' + this.dynamicId + '" type="checkbox" ' + (this.checked ? "checked" : "") + ">", '<label control-type="tf-chk-label" for="' + this.dynamicId + '">' + this.fieldLabel + "</label>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.childTemplate.querySelector('[control-type="tf-checkbox"]'), 
            this.labelComp = this.childTemplate.querySelector('[control-type="tf-chk-label"]');
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), "" != this.name && this.innerComp.setAttribute("name", this.name), "" != this.attributes && Object.keys(this.attributes).forEach(function(attr) {
                this.innerComp.setAttribute(attr, this.attributes[attr]);
            }, this), this.compClass && this.outerComp.classList.addmany(this.compClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.innerComp = this.innerComp, me.outerComp = this.outerComp, me.labelComp = this.labelComp, 
            TFLib.TFCheckboxMethods.call(me), TFLib.TFSharedMethods.call(me), me.outerComp.shared = me;
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        }
    };
    return checkbox._init();
}, TFLib.TFCheckboxField = function() {
    var checkboxfield = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-chkf-" + (TFLib.TFCheckboxField.count = ++TFLib.TFCheckboxField.count || 1), 
            this.labelId = me.labelId || "tf-chk-label-" + (TFLib.TFCheckboxField.count = ++TFLib.TFCheckboxField.count || 1), 
            this.requiredId = "tf-chk-req-" + (TFLib.TFCheckboxField.count = ++TFLib.TFCheckboxField.count || 1), 
            this.fieldLayout = me.fieldLayout || "row", this.styles = me.styles || "", this.fieldGroup = me.fieldGroup || [], 
            this.groupLayout = me.groupLayout || "column", this.name = me.name || "", this.validations = me.validations || {}, 
            this.validations.__proto__ = {
                isRequired: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.ISREQUIRED
                },
                customError: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.CUSTOMERROR
                }
            }, this.flex = me.flex || "", this.fieldLabel = me.fieldLabel || "", this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.controlClass = !!me.controlClass && (me.controlClass.constructor === Array ? me.controlClass : [ me.controlClass ]), 
            this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-checkboxfield-outer"  id="' + this.dynamicId + '"', 'class="tf-flex tf-field-container ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<div control-type="tf-chkf-label" class=tf-field-container--label "' + ("none" === this.displayLabel ? "tf-display--none" : "") + '">', '<label id="' + this.labelId + '">' + (this.fieldLabel ? this.fieldLabel : "") + "</label>", '<span id="' + this.requiredId + '" class="tf-required--red" style="display:none;">*</span>', "</div>", '<div control-type="tf-checkboxfield" class="tf-field-container--control tf-flex ' + ("row" === this.groupLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', "</div>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.controlComp = this.childTemplate.querySelector('[control-type="tf-checkboxfield"]'), 
            this.labelComp = this.childTemplate.querySelector('[control-type="tf-chkf-label"]'), 
            this.innerComp = this.controlComp.getElementsByTagName("input"), this.requiredComp = this.labelComp.querySelector("#" + this.requiredId);
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), this.flex && (this.outerComp.style.flex = this.flex, this.outerComp.style.msFlex = this.flex), 
            this.compClass && this.outerComp.classList.addmany(this.compClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass), 
            this.controlClass && this.controlComp.classList.addmany(this.controlClass), this.fieldGroup.forEach(function(item) {
                "" != this.name && (item.name = this.name), this.controlComp.appendChild(TFLib.TFCheckbox.call(item));
            }, this), this.innerComp = this.controlComp.getElementsByTagName("input");
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.controlComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.controlComp = this.controlComp, me.outerComp = this.outerComp, me.labelComp = this.labelComp, 
            me.innerComp = this.innerComp, me.labelId = this.labelId, me.requiredComp = this.requiredComp, 
            me.setValidations = this.setValidations, TFLib.TFCheckboxFieldMethods.call(me), 
            TFLib.TFSharedMethods.call(me), me.outerComp.shared = me, me.validationMethods = {}, 
            TFLib.TFValidations.call(me.validationMethods), Object.keys(this.validations).length > 0 && (this._handleValidationsFallback(), 
            this.setValidations.call(me));
        },
        _handleValidationsFallback: function() {
            Object.keys(this.validations).forEach(function(val) {
                "__proto__" === val || this[val].errmsg || (this[val].errmsg = this.__proto__[val].errmsg);
            }.bind(this.validations));
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        },
        setValidations: function() {
            this.validations && Object.keys(this.validations).forEach(function(val) {
                switch (val) {
                  case "isRequired":
                    if (this.validations.isRequired.value) {
                        if (!this.isRequiredHandler) {
                            this.requiredComp.style.display = "", this.isRequiredHandler = this.validationMethods.isRequired.bind(this);
                            for (var i = 0; i < this.innerComp.length; i++) this.innerComp[i].addEventListener("change", this.isRequiredHandler);
                        }
                    } else {
                        this.requiredComp.style.display = "none";
                        for (var i = 0; i < this.innerComp.length; i++) this.innerComp[i].removeEventListener("change", this.isRequiredHandler);
                        delete this.isRequiredHandler;
                    }
                    break;

                  case "customError":
                    this.validations.customError.value && this.customError(this.validations.customError.value);
                }
            }, this);
        }
    };
    return checkboxfield._init();
}, TFLib.TFContainer = function() {
    var container = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-container-" + (TFLib.TFContainer.count = ++TFLib.TFContainer.count || 1), 
            this.layout = me.layout || !1, this.styles = me.styles || "", this.tagName = me.tagName || "div", 
            this.attributes = me.attributes || "", this.flex = me.flex || "", this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.innerHTML = me.innerHTML || !1, this.innerText = me.innerText || !1, this.render = me.render || "", 
            this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = document.createElement(this.tagName);
            el.classList.add("tf-field-container"), this.layout && el.classList.add("tf-flex"), 
            el.setAttribute("control-type", "tf-container"), el.setAttribute("id", this.dynamicId), 
            this.childTemplate = el;
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate;
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), this.flex && (this.outerComp.style.flex = this.flex, this.outerComp.style.msFlex = this.flex), 
            this.compClass && this.outerComp.classList.addmany(this.compClass), "row" === this.layout ? this.outerComp.classList.add("tf-flex-direction--row") : "column" === this.layout && this.outerComp.classList.add("tf-flex-direction--column"), 
            "" != this.attributes && Object.keys(this.attributes).forEach(function(attr) {
                this.outerComp.setAttribute(attr, this.attributes[attr]);
            }, this), this.innerText && (this.outerComp.innerText = this.innerText), this.innerHTML && (this.outerComp.innerHTML = this.innerHTML);
        },
        _bindEvents: function() {
            this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.outerComp.addEventListener(listener, this.listeners[listener].bind(this.scope));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.outerComp = this.outerComp, TFLib.TFSharedMethods.call(me), me.outerComp.shared = me;
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && me.render.call(me);
        }
    };
    return container._init();
}, TFLib.Iterator = function(config) {
    function iterateStructure(config) {
        var el = iterateItems(config);
        return config.items && config.items.length > 0 ? (config.items.forEach(function(item, index) {
            if (item.id) {
                if (iterateStructure.idList.indexOf(item.id) != -1) throw "Duplicate id : " + item.id;
                if (iterateStructure.idList.push(item.id), item.ATTRIBUTE_NODE) el.appendChild(item); else {
                    var childEl = iterateStructure(item);
                    el.appendChild(childEl);
                }
            } else if (item.ATTRIBUTE_NODE) el.appendChild(item); else {
                var childEl = iterateStructure(item);
                el.appendChild(childEl);
            }
        }), el) : el;
    }
    function iterateItems(item) {
        var el;
        switch (item.type) {
          case "textfield":
            el = TFLib.TFTextField.call(item);
            break;

          case "textareafield":
            el = TFLib.TFTextAreaField.call(item);
            break;

          case "checkboxfield":
            el = TFLib.TFCheckboxField.call(item);
            break;

          case "radiofield":
            el = TFLib.TFRadioField.call(item);
            break;

          case "checkbox":
            el = TFLib.TFCheckbox.call(item);
            break;

          case "radio":
            el = TFLib.TFRadio.call(item);
            break;

          case "container":
            el = TFLib.TFContainer.call(item);
            break;

          case "button":
            el = TFLib.TFButton.call(item);
            break;

          case "comboboxfield":
            el = TFLib.TFComboboxField.call(item);
            break;

          default:
            el = TFLib.TFContainer.call(item);
        }
        if (el) return el;
    }
    iterateStructure.idList = [];
    var el = iterateStructure(config);
    return el.TFappendTo = function(selector, el) {
        if (el) {
            var ele = this.shared.outerComp.querySelector(selector);
            ele.appendChild(el);
        } else {
            var ele = document.querySelector(selector);
            ele && ele.appendChild(this.shared.outerComp);
        }
    }, el.TFinsertBefore = function(selector, el) {
        if (el) {
            var ele = this.shared.outerComp.querySelector(selector);
            if (ele) {
                var callingEL = this.shared.outerComp == ele.parentElement ? this.shared.outerComp.parentElement : this.shared.outerComp;
                callingEL.insertBefore(el, ele.parentElement);
            }
        } else {
            var ele = document.querySelector(selector);
            if (ele) {
                var callingEL = document.body == ele.parentElement ? document.body.parentElement : document.body;
                callingEL.insertBefore(this.shared.outerComp, ele.parentElement);
            }
        }
    }, el;
}, TFLib.TFRadio = function() {
    var radio = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-radio-" + (me.attributes && me.attributes.name ? me.attributes.name : "") + (TFLib.TFRadio.count = ++TFLib.TFRadio.count || 1), 
            this.fieldLayout = me.fieldLayout || "row", this.styles = me.styles || "", this.attributes = me.attributes || "", 
            this.name = me.name || "", this.checked = me.checked === !0, this.fieldLabel = me.fieldLabel || "", 
            this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-radio-outer" class="tf-flex ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<input control-type="tf-radio" id="' + this.dynamicId + '" type="radio" ' + (this.checked ? "checked" : "") + "/>", '<label control-type="tf-radio-label" for="' + this.dynamicId + '">' + this.fieldLabel + "</label>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.childTemplate.querySelector('[control-type="tf-radio"]'), 
            this.labelComp = this.childTemplate.querySelector('[control-type="tf-radio-label"]');
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), "" != this.name && this.innerComp.setAttribute("name", this.name), "" != this.attributes && Object.keys(this.attributes).forEach(function(attr) {
                this.innerComp.setAttribute(attr, this.attributes[attr]);
            }, this), this.compClass && this.outerComp.classList.addmany(this.compClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.innerComp = this.innerComp, me.outerComp = this.outerComp, me.labelComp = this.labelComp, 
            TFLib.TFCheckboxMethods.call(me), TFLib.TFSharedMethods.call(me), me.outerComp.shared = me;
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        }
    };
    return radio._init();
}, TFLib.TFRadioField = function() {
    var radiofield = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-radiof-" + (TFLib.TFRadioField.count = ++TFLib.TFRadioField.count || 1), 
            this.labelId = me.labelId || "tf-radio-label-" + (TFLib.TFRadioField.count = ++TFLib.TFRadioField.count || 1), 
            this.requiredId = "tf-radio-req-" + (TFLib.TFRadioField.count = ++TFLib.TFRadioField.count || 1), 
            this.fieldLayout = me.fieldLayout || "row", this.styles = me.styles || "", this.fieldGroup = me.fieldGroup || [], 
            this.groupLayout = me.groupLayout || "column", this.name = me.name || "", this.validations = me.validations || {}, 
            this.validations.__proto__ = {
                isRequired: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.ISREQUIRED
                },
                customError: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.CUSTOMERROR
                }
            }, this.flex = me.flex || "", this.fieldLabel = me.fieldLabel || "", this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.controlClass = !!me.controlClass && (me.controlClass.constructor === Array ? me.controlClass : [ me.controlClass ]), 
            this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-radiofield-outer" id="' + this.dynamicId + '"', 'class="tf-field-container tf-flex ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<div control-type="tf-radiof-label" class=tf-field-container--label "' + ("none" === this.displayLabel ? "tf-display--none" : "") + '">', '<label id="' + this.labelId + '">' + (this.fieldLabel ? this.fieldLabel : "") + "</label>", '<span id="' + this.requiredId + '" class="tf-required--red" style="display:none;">*</span>', "</div>", '<div control-type="tf-radiofield" class="tf-field-container--control tf-flex ' + ("row" === this.groupLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', "</div>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.controlComp = this.childTemplate.querySelector('[control-type="tf-radiofield"]'), 
            this.labelComp = this.childTemplate.querySelector('[control-type="tf-radiof-label"]'), 
            this.requiredComp = this.labelComp.querySelector("#" + this.requiredId);
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), this.flex && (this.outerComp.style.flex = this.flex, this.outerComp.style.msFlex = this.flex), 
            this.compClass && this.outerComp.classList.addmany(this.compClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass), 
            this.controlClass && this.controlComp.classList.addmany(this.controlClass), this.fieldGroup.forEach(function(item) {
                "" != this.name && (item.name = this.name), this.controlComp.appendChild(TFLib.TFRadio.call(item));
            }, this), this.innerComp = this.controlComp.getElementsByTagName("input");
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.controlComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.controlComp = this.controlComp, me.outerComp = this.outerComp, me.labelComp = this.labelComp, 
            me.innerComp = this.innerComp, me.labelId = this.labelId, me.requiredComp = this.requiredComp, 
            me.setValidations = this.setValidations, TFLib.TFCheckboxFieldMethods.call(me), 
            TFLib.TFSharedMethods.call(me), me.outerComp.shared = me, me.validationMethods = {}, 
            TFLib.TFValidations.call(me.validationMethods), Object.keys(this.validations).length > 0 && (this._handleValidationsFallback(), 
            this.setValidations.call(me));
        },
        _handleValidationsFallback: function() {
            Object.keys(this.validations).forEach(function(val) {
                "__proto__" === val || this[val].errmsg || (this[val].errmsg = this.__proto__[val].errmsg);
            }.bind(this.validations));
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        },
        setValidations: function() {
            this.validations && Object.keys(this.validations).forEach(function(val) {
                switch (val) {
                  case "isRequired":
                    if (this.validations.isRequired.value) {
                        if (!this.isRequiredHandler) {
                            this.requiredComp.style.display = "", this.isRequiredHandler = this.validationMethods.isRequired.bind(this);
                            for (var i = 0; i < this.innerComp.length; i++) this.innerComp[i].addEventListener("change", this.isRequiredHandler);
                        }
                    } else {
                        this.requiredComp.style.display = "none";
                        for (var i = 0; i < this.innerComp.length; i++) this.innerComp[i].removeEventListener("change", this.isRequiredHandler);
                        delete this.isRequiredHandler;
                    }
                    break;

                  case "customError":
                    this.validations.customError.value && this.customError(this.validations.customError.value);
                }
            }, this);
        }
    };
    return radiofield._init();
}, TFLib.TFTextAreaField = function() {
    var textareafield = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-ta-comp-" + (TFLib.TFTextAreaField.count = ++TFLib.TFTextAreaField.count || 1), 
            this.innerId = me.innerId || "tf-ta-" + (TFLib.TFTextAreaField.count = ++TFLib.TFTextAreaField.count || 1), 
            this.requiredId = "tf-ta-req-" + (TFLib.TFTextAreaField.count = ++TFLib.TFTextAreaField.count || 1), 
            this.styles = me.styles || "", this.buttons = me.buttons || [], this.attributes = me.attributes || "", 
            this.displayLabel = me.displayLabel || !1, this.fieldLayout = me.fieldLayout || "row", 
            this.validations = me.validations || {}, this.validations.__proto__ = {
                isRequired: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.ISREQUIRED
                },
                onlyText: {
                    value: !1
                },
                onlyNumber: {
                    value: !1
                },
                regex: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.REGEX
                },
                customError: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.CUSTOMERROR
                }
            }, this.flex = me.flex || !1, this.fieldLabel = me.fieldLabel || "", this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.controlClass = !!me.controlClass && (me.controlClass.constructor === Array ? me.controlClass : [ me.controlClass ]), 
            this.name = me.name || "", this.placeholder = me.placeholder || "", this.pattern = me.pattern || "", 
            this.required = me.required === !0 ? "required" : "", this.value = me.value || "", 
            this.readOnly = me.readOnly === !0 ? "readonly" : "", this.maxlength = me.maxlength || "", 
            this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-textareafield-outer"', 'id="' + this.dynamicId + '"', 'class="tf-field-container tf-flex ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<div control-type="tf-taf-label" class="tf-flex tf-field-container--label " ' + (this.displayLabel ? "tf-display--none" : "") + ">", '<label for="' + this.innerId + '">' + (this.fieldLabel ? this.fieldLabel : "") + "</label>", '<span id="' + this.requiredId + '" class="tf-required--red" style="display:none;" >*</span>', "</div>", '<div control-type="tf-textareafield" class="tf-field-container--control tf-field-with-btn">', '<textarea class="tf-flex tf-flex--one"', 'id="' + this.innerId + '"', "" + (this.name ? 'name="' + this.name + '"' : ""), "" + (this.placeholder ? 'placeholder="' + this.placeholder + '"' : ""), "" + (this.cols ? 'cols="' + this.cols + '"' : ""), "" + (this.rows ? 'rows="' + this.rows + '"' : ""), "" + (this.maxlength ? 'maxlength="' + this.maxlength + '"' : ""), "" + this.readOnly, "" + this.required, "" + this.disabled, ">", "" + (this.value ? 'value="' + this.value + '"' : ""), "</textarea>", "</div>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.childTemplate.querySelector("textarea"), 
            this.labelComp = this.childTemplate.querySelector('[control-type="tf-taf-label"]'), 
            this.controlComp = this.childTemplate.querySelector('[control-type="tf-textareafield"]'), 
            this.requiredComp = this.childTemplate.querySelector("#" + this.requiredId);
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), "" != this.attributes && Object.keys(this.attributes).forEach(function(attribute) {
                this.innerComp.setAttribute(attribute, this.attributes[attribute]);
            }, this), this.flex && (this.outerComp.style.flex = this.flex, this.outerComp.style.msFlex = this.flex), 
            this.controlClass && this.controlComp.classList.addmany(this.controlClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass), 
            this.compClass && this.outerComp.classList.addmany(this.compClass), this.buttons.forEach(function(val) {
                this.controlComp.appendChild(TFLib.TFButton.call(val));
            }, this);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.innerComp = this.innerComp, me.labelComp = this.labelComp, me.outerComp = this.outerComp, 
            me.controlComp = this.controlComp, me.setValidations = this.setValidations, me.validations = this.validations, 
            me.innerId = this.innerId, me.requiredComp = this.requiredComp, TFLib.TFTextFieldMethods.call(me), 
            TFLib.TFSharedMethods.call(me), this.outerComp.shared = me, me.validationMethods = {}, 
            TFLib.TFValidations.call(me.validationMethods), Object.keys(this.validations).length > 0 && (this._handleValidationsFallback(), 
            this.setValidations.call(me));
        },
        _handleValidationsFallback: function() {
            Object.keys(this.validations).forEach(function(val) {
                "__proto__" === val || this[val].errmsg || (this[val].errmsg = this.__proto__[val].errmsg);
            }.bind(this.validations));
        },
        _render: function() {
            var me = this;
            "" != this.render && this.render.call(me);
        },
        setValidations: function() {
            Object.keys(this.validations).forEach(function(val) {
                switch (val) {
                  case "isRequired":
                    this.validations.isRequired.value ? this.isRequiredHandler || (this.requiredComp.style.display = "", 
                    this.isRequiredHandler = this.validationMethods.isRequired.bind(this), this.innerComp.addEventListener("blur", this.isRequiredHandler), 
                    this.innerComp.addEventListener("input", this.isRequiredHandler)) : (this.requiredComp.style.display = "none", 
                    this.innerComp.removeEventListener("blur", this.isRequiredHandler), this.innerComp.removeEventListener("input", this.isRequiredHandler), 
                    delete this.isRequiredHandler);
                    break;

                  case "onlyNumber":
                    this.validations.onlyNumber.value ? this.onlyNumberHandler || (this.onlyNumberHandler = this.validationMethods.onlyNumber.bind(this), 
                    this.innerComp.addEventListener("keydown", this.onlyNumberHandler)) : (this.innerComp.removeEventListener("keydown", this.onlyNumberHandler), 
                    delete this.onlyNumberHandler);
                    break;

                  case "regex":
                    this.validations.regex.value ? this.regexHandler || (this.regexHandler = this.validationMethods.regex.bind(this), 
                    this.innerComp.addEventListener("blur", this.regexHandler), this.innerComp.addEventListener("input", this.regexHandler)) : (this.innerComp.removeEventListener("blur", this.regexHandler), 
                    this.innerComp.removeEventListener("input", this.regexHandler), delete this.regexHandler);
                    break;

                  case "onlyText":
                    this.validations.onlyText.value ? this.onlyTextHandler || (this.onlyTextHandler = this.validationMethods.onlyText.bind(this), 
                    this.innerComp.addEventListener("keydown", this.onlyTextHandler)) : (this.innerComp.removeEventListener("keydown", this.onlyTextHandler), 
                    delete this.onlyTextHandler);
                    break;

                  case "customError":
                    this.validations.customError.value && this.customError(this.validations.customError.value);
                }
            }, this);
        }
    };
    return textareafield._init();
}, TFLib.TFTextField = function() {
    var textfield = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-textfield-" + (TFLib.TFTextField.count = ++TFLib.TFTextField.count || 1), 
            this.innerId = me.innerId || me.name || "tf-input-text-" + (TFLib.TFTextField.count = ++TFLib.TFTextField.count || 1), 
            this.requiredId = "tf-input-req-" + (TFLib.TFTextField.count = ++TFLib.TFTextField.count || 1), 
            this.buttons = me.buttons || [], this.validations = me.validations || {}, this.validations.__proto__ = {
                isRequired: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.ISREQUIRED
                },
                onlyText: {
                    value: !1
                },
                onlyNumber: {
                    value: !1
                },
                regex: {
                    value: !1,
                    pattern: "*",
                    errmsg: TFLib.TFConstants.COMMON.REGEX
                },
                customError: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.CUSTOMERROR
                }
            }, this.styles = me.styles || "", this.attributes = me.attributes || "", this.displayLabel = me.displayLabel || !1, 
            this.fieldLabel = me.fieldLabel || "", this.fieldLayout = me.fieldLayout || "row", 
            this.flex = me.flex || !1, this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.controlClass = !!me.controlClass && (me.controlClass.constructor === Array ? me.controlClass : [ me.controlClass ]), 
            this.name = me.name || "", this.placeholder = me.placeholder || "", this.pattern = me.pattern || "", 
            this.required = me.required === !0 ? "required" : "", this.value = me.value || "", 
            this.readOnly = me.readOnly === !0 ? "readonly" : "", this.maxlength = me.maxlength || "", 
            this.tabindex = me.tabindex || "", this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-textfield-outer"', 'id="' + this.dynamicId + '"', 'class="tf-field-container tf-flex ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<div control-type="tf-tf-label" class="tf-field-container--label tf-flex  ' + (this.displayLabel ? "tf-display--none" : "") + '">', '<label for="' + this.innerId + '">' + (this.fieldLabel ? this.fieldLabel : "") + "</label>", '<span id="' + this.requiredId + '" class="tf-required--red" style="display:none;">*</span>', "</div>", '<div control-type="tf-textfield" class="tf-field-container--control tf-field-with-btn">', '<input class="tf-flex tf-flex--one"', 'type="text"', 'id="' + this.innerId + '"', "" + (this.name ? 'name="' + this.name + '"' : ""), "" + (this.value ? 'value="' + this.value + '"' : ""), "" + (this.placeholder ? 'placeholder="' + this.placeholder + '"' : ""), "" + (this.pattern ? 'pattern="' + this.pattern + '"' : ""), "" + (this.maxlength ? 'maxlength="' + this.maxlength + '"' : ""), "" + (this.tabindex ? 'tabindex="' + this.tabindex + '"' : ""), "" + this.readOnly, "" + this.required, "/>", "</div>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.childTemplate.querySelector("input"), 
            this.controlComp = this.childTemplate.querySelector("[control-type='tf-textfield']"), 
            this.labelComp = this.childTemplate.querySelector("[control-type='tf-tf-label']"), 
            this.requiredComp = this.labelComp.querySelector("#" + this.requiredId);
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), "" != this.attributes && Object.keys(this.attributes).forEach(function(attribute) {
                this.innerComp.setAttribute(attribute, this.attributes[attribute]);
            }, this), this.controlClass && this.controlComp.classList.addmany(this.controlClass), 
            this.compClass && this.outerComp.classList.addmany(this.compClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass), 
            this.flex && (this.outerComp.style.flex = this.flex, this.outerComp.style.msFlex = this.flex), 
            this.buttons.forEach(function(val) {
                this.controlComp.appendChild(TFLib.TFButton.call(val));
            }, this);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.outerComp = this.outerComp, me.innerComp = this.innerComp, me.controlComp = this.controlComp, 
            me.labelComp = this.labelComp, me.setValidations = this.setValidations, me.validations = this.validations, 
            me.innerId = this.innerId, me.requiredComp = this.requiredComp, TFLib.TFTextFieldMethods.call(me), 
            TFLib.TFSharedMethods.call(me), this.outerComp.shared = me, me.validationMethods = {}, 
            TFLib.TFValidations.call(me.validationMethods), Object.keys(this.validations).length > 0 && (this._handleValidationsFallback(), 
            this.setValidations.call(me));
        },
        _handleValidationsFallback: function() {
            Object.keys(this.validations).forEach(function(val) {
                "__proto__" === val || this[val].errmsg || (this[val].errmsg = this.__proto__[val].errmsg);
            }.bind(this.validations));
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        },
        setValidations: function() {
            Object.keys(this.validations).forEach(function(val) {
                switch (val) {
                  case "isRequired":
                    this.validations.isRequired.value ? this.isRequiredHandler || (this.requiredComp.style.display = "", 
                    this.isRequiredHandler = this.validationMethods.isRequired.bind(this), this.innerComp.addEventListener("blur", this.isRequiredHandler), 
                    this.innerComp.addEventListener("input", this.isRequiredHandler)) : (this.requiredComp.style.display = "none", 
                    this.innerComp.removeEventListener("blur", this.isRequiredHandler), this.innerComp.removeEventListener("input", this.isRequiredHandler), 
                    delete this.isRequiredHandler);
                    break;

                  case "onlyNumber":
                    this.validations.onlyNumber ? this.onlyNumberHandler || (this.onlyNumberHandler = this.validationMethods.onlyNumber.bind(this), 
                    this.innerComp.addEventListener("keydown", this.onlyNumberHandler)) : (this.innerComp.removeEventListener("keydown", this.onlyNumberHandler), 
                    delete this.onlyNumberHandler);
                    break;

                  case "regex":
                    this.validations.regex.value ? this.regexHandler || (this.regexHandler = this.validationMethods.regex.bind(this), 
                    this.innerComp.addEventListener("blur", this.regexHandler), this.innerComp.addEventListener("input", this.regexHandler)) : (this.innerComp.removeEventListener("blur", this.regexHandler), 
                    this.innerComp.removeEventListener("input", this.regexHandler), delete this.regexHandler);
                    break;

                  case "onlyText":
                    this.validations.onlyText ? this.onlyTextHandler || (this.onlyTextHandler = this.validationMethods.onlyText.bind(this), 
                    this.innerComp.addEventListener("keydown", this.onlyTextHandler)) : (this.innerComp.removeEventListener("keydown", this.onlyTextHandler), 
                    delete this.onlyTextHandler);
                    break;

                  case "customError":
                    this.validations.customError.value && this.customError(this.validations.customError.value);
                }
            }, this);
        }
    };
    return textfield._init();
}, TFLib.TFLoader = function() {
    var loader = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-loader-" + (TFLib.TFLoader.count = ++TFLib.TFLoader.count || 1), 
            this.styles = me.styles || "", this.attributes = me.attributes || "", this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.loaderClass = !!me.loaderClass && (me.loaderClass.constructor === Array ? me.loaderClass : [ me.loaderClass ]), 
            this.LoaderText = me.loaderText || "Loading...", this.LoaderImage = me.loaderImage || '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" class="uil-ripple"><rect x="0" y="0" width="100" height="100" fill="none" class="bk"></rect><g> <animate attributeName="opacity" dur="2s" repeatCount="indefinite" begin="0s" keyTimes="0;0.33;1" values="1;1;0"></animate><circle cx="50" cy="50" r="40" stroke="#5b5bf0" fill="none" stroke-width="6" stroke-linecap="round"><animate attributeName="r" dur="2s" repeatCount="indefinite" begin="0s" keyTimes="0;0.33;1" values="0;22;44"></animate></circle></g><g><animate attributeName="opacity" dur="2s" repeatCount="indefinite" begin="1s" keyTimes="0;0.33;1" values="1;1;0"></animate><circle cx="50" cy="50" r="40" stroke="#524a69" fill="none" stroke-width="6" stroke-linecap="round"><animate attributeName="r" dur="2s" repeatCount="indefinite" begin="1s" keyTimes="0;0.33;1" values="0;22;44"></animate></circle></g></svg>';
        },
        _generateTemplate: function() {
            var el = [ '<section control-type="tf-loader-outer" class="tf-loader--main" id="' + this.dynamicId + '">', '<div class="tf-loader--outer">', '<div class="tf-loader" control-type="tf-loader">', '<div class="tf-loader--image">', this.LoaderImage, "</div>", '<div class="tf-loader--text">' + this.LoaderText + "</div>", "</div>", "</div>", "</section>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.childTemplate.querySelector('[control-type="tf-loader"]'), 
            this.innerComp.loaderImage = this.innerComp.querySelector(".tf-loader--image"), 
            this.innerComp.loaderText = this.innerComp.querySelector(".tf-loader--text"), this.innerComp.initLoaderImage = this.innerComp.loaderImage.innerHTML, 
            this.innerComp.initLoaderText = this.innerComp.loaderText.innerText;
        },
        _applyProperty: function() {
            "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.innerComp.style[style] = this.styles[style];
            }, this), "" != this.attributes && Object.keys(this.attributes).forEach(function(attribute) {
                this.innerComp.setAttribute(attribute, this.attributes[attribute]);
            }, this), this.LoaderText && (this.innerComp.querySelector(".tf-loader--text").innerHTML = this.LoaderText), 
            this.loaderClass && this.innerComp.classList.addmany(this.loaderClass), this.compClass && this.outerComp.classList.addmany(this.compClass);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _attachProperties: function() {
            var me = this.scope;
            me.innerComp = this.innerComp, me.outerComp = this.outerComp, me.loaderCount = 0, 
            TFLib.TFLoaderMethods.call(me), me.outerComp.shared = me;
        },
        _render: function() {
            var me = this.scope;
            this.render && "" != this.render && me.render.call(me);
        }
    };
    return loader._init();
}, TFLib.TFComboboxField = function() {
    var comboboxfield = {
        scope: this,
        _init: function() {
            return this._initialize(), this._generateTemplate(), this._cacheDom(), this._applyProperty(), 
            this._bindEvents(), this._attachProperties(), this._render(), this.outerComp;
        },
        _initialize: function() {
            var me = this.scope;
            this.dynamicId = me.id || "tf-combo-" + (TFLib.TFComboboxField.count = ++TFLib.TFComboboxField.count || 1), 
            this.labelId = me.labelId || "tf-combo-label-" + (TFLib.TFComboboxField.count = ++TFLib.TFComboboxField.count || 1), 
            this.requiredId = "tf-combo-req-" + (TFLib.TFComboboxField.count = ++TFLib.TFComboboxField.count || 1), 
            this.buttons = me.buttons || [], this.validations = me.validations || {}, this.validations.__proto__ = {
                isRequired: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.ISREQUIRED
                },
                customError: {
                    value: !1,
                    errmsg: TFLib.TFConstants.COMMON.CUSTOMERROR
                }
            }, this.styles = me.styles || "", this.attributes = me.attributes || "", this.displayLabel = me.displayLabel || !1, 
            this.fieldLabel = me.fieldLabel || "", this.fieldLayout = me.fieldLayout || "row", 
            this.data = me.data || [], this.value = me.value || "value", this.display = me.display || "display", 
            this.flex = me.flex || !1, this.labelClass = !!me.labelClass && (me.labelClass.constructor === Array ? me.labelClass : [ me.labelClass ]), 
            this.compClass = !!me.compClass && (me.compClass.constructor === Array ? me.compClass : [ me.compClass ]), 
            this.controlClass = !!me.controlClass && (me.controlClass.constructor === Array ? me.controlClass : [ me.controlClass ]), 
            this.name = me.name || "", this.multiple = me.multiple === !0 ? "multiple" : "", 
            this.tabindex = me.tabindex || "", this.render = me.render || "", this.listeners = me.listeners || "";
        },
        _generateTemplate: function() {
            var el = [ '<div control-type="tf-combofield-outer"', 'id="' + this.dynamicId + '"', 'class="tf-field-container tf-flex ' + ("row" === this.fieldLayout ? "tf-flex-direction--row " : "tf-flex-direction--column ") + '">', '<div control-type="tf-combo-label" class="tf-field-container--label tf-flex ' + (this.displayLabel ? "tf-display--none" : "") + '">', '<label class="tf-field--label" id="' + this.labelId + '">' + (this.fieldLabel ? this.fieldLabel : "") + "</label>", '<span id="' + this.requiredId + '" class="tf-required--red" style="display:none;">*</span>', "</div>", '<div control-type="tf-combofield" class="tf-field-container--control tf-field-with-btn" >', '<select class="tf-flex tf-flex--one"', 'type="text"', "" + (this.name ? 'name="' + this.name + '"' : ""), "" + (this.tabindex ? 'tabindex="' + this.tabindex + '"' : ""), "" + this.multiple, "></select>", "</div>", "</div>" ].join("\n");
            this.childTemplate = $(el)[0];
        },
        _cacheDom: function() {
            this.outerComp = this.childTemplate, this.innerComp = this.outerComp.querySelector("select"), 
            this.controlComp = this.outerComp.querySelector("[control-type='tf-combofield']"), 
            this.labelComp = this.outerComp.querySelector("[control-type='tf-combo-label']"), 
            this.requiredComp = this.labelComp.querySelector("#" + this.requiredId);
        },
        _applyProperty: function() {
            this.data.forEach(function(val, index) {
                var opt = document.createElement("option");
                opt.setAttribute("value", val[this.value]), opt.innerHTML = val[this.display], this.innerComp.appendChild(opt);
            }, this), "" != this.styles && Object.keys(this.styles).forEach(function(style) {
                this.outerComp.style[style] = this.styles[style];
            }, this), "" != this.attributes && Object.keys(this.attributes).forEach(function(attribute) {
                this.innerComp.setAttribute(attribute, this.attributes[attribute]);
            }, this), this.controlClass && this.controlComp.classList.addmany(this.controlClass), 
            this.compClass && this.outerComp.classList.addmany(this.compClass), this.labelClass && this.labelComp.classList.addmany(this.labelClass), 
            this.flex && (this.outerComp.style.flex = this.flex, this.outerComp.style.msFlex = this.flex), 
            this.buttons.forEach(function(val) {
                this.controlComp.appendChild(TFLib.TFButton.call(val));
            }, this);
        },
        _bindEvents: function() {
            var me = this.scope;
            if ("" != this.listeners) for (var listener in this.listeners) this.innerComp.addEventListener(listener, this.listeners[listener].bind(me));
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        },
        _attachProperties: function() {
            var me = this.scope;
            me.outerComp = this.outerComp, me.innerComp = this.innerComp, me.controlComp = this.controlComp, 
            me.labelComp = this.labelComp, me.setValidations = this.setValidations, me.requiredComp = this.requiredComp, 
            me.addData = this.addData, TFLib.TFComboboxFieldMethods.call(me), TFLib.TFCheckboxFieldMethods.call(me), 
            TFLib.TFSharedMethods.call(me), this.outerComp.shared = me, me.validationMethods = {}, 
            TFLib.TFValidations.call(me.validationMethods), Object.keys(this.validations).length > 0 && (this._handleValidationsFallback(), 
            this.setValidations.call(me));
        },
        _handleValidationsFallback: function() {
            Object.keys(this.validations).forEach(function(val) {
                "__proto__" === val || this[val].errmsg || (this[val].errmsg = this.__proto__[val].errmsg);
            }.bind(this.validations));
        },
        _render: function() {
            var me = this.scope;
            "" != this.render && this.render.call(me);
        },
        setValidations: function() {
            this.validations && Object.keys(this.validations).forEach(function(val) {
                switch (val) {
                  case "isRequired":
                    if (this.validations.isRequired.value) {
                        if (!this.isRequiredHandler) {
                            this.requiredComp.style.display = "", this.isRequiredHandler = this.validationMethods.isRequired.bind(this);
                            for (var i = 0; i < this.innerComp.length; i++) this.innerComp[i].addEventListener("change", this.isRequiredHandler);
                        }
                    } else {
                        this.requiredComp.style.display = "none";
                        for (var i = 0; i < this.innerComp.length; i++) this.innerComp[i].removeEventListener("change", this.isRequiredHandler);
                        delete this.isRequiredHandler;
                    }
                    break;

                  case "customError":
                    this.validations.customError.value && this.customError(this.validations.customError.value);
                }
            }, this);
        }
    };
    return comboboxfield._init();
};